---
import "../styles/global.css"
---

  <details class="dropdown themeButtonDropDown">
    <summary role="button" class="secondary">Theme</summary>
    <ul>
      <li><a href="#" data-theme-switcher="light">Light</a></li>
      <li><a href="#" data-theme-switcher="dark">Dark</a></li>
    </ul>
  </details>



<script is:inline>

function calculateSettingAsThemeString({ localStorageTheme, systemSettingDark }) {
  if (localStorageTheme !== null) {
    return localStorageTheme;
  }

  if (systemSettingDark.matches) {
    return "dark";
  }

  return "light";
}

const localStorageTheme = localStorage.getItem("theme");
const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");

let currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });
// console.log(currentThemeSetting);

document.documentElement.querySelector("html")?.setAttribute(this.rootAttribute, currentThemeSetting);
const cachedTheme = localStorage.getItem("theme");
if (cachedTheme) {
  document.documentElement.dataset["theme"] = cachedTheme;
  document.documentElement.querySelector("html")?.setAttribute(this.rootAttribute, cachedTheme);
}

const THEME_OWNER = document.documentElement;
const THEME_STORAGE_KEY = 'theme';
const localStorageTheme2 = localStorage.getItem("theme");
const systemSettingDark2 = window.matchMedia("(prefers-color-scheme: dark)");

// const currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });
document.addEventListener('DOMContentLoaded', () => {
const themeSwitcher = {
  // Config
  _scheme: "auto",
  menuTarget: "details.dropdown",
  buttonsTarget: "a[data-theme-switcher]",
  buttonAttribute: "data-theme-switcher",
  rootAttribute: "data-theme",
  localStorageKey: "theme",




  calculateSettingAsThemeString({ localStorageTheme2, systemSettingDark2 }) {
  if (localStorageTheme2 !== null) {
    return localStorageTheme2;
  }

  if (systemSettingDark2.matches) {
    return "dark";
  }

  return "light";
  },

  // Init
  init() {
    this.scheme = this.calculateSettingAsThemeString({ localStorageTheme2, systemSettingDark2 });

    this.initSwitchers();
  },


  // Preferred color scheme
  get preferredColorScheme() {
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  },

//   // Init switchers
  initSwitchers() {
    const buttons = document.querySelectorAll(this.buttonsTarget);
    buttons.forEach((button) => {
      button.addEventListener(
        "click",
        (event) => {
        
          event.preventDefault();
          buttonThemePressed = button.getAttribute(this.buttonAttribute);

          if (buttonThemePressed == "dark" || buttonThemePressed == "light") {

            document.querySelector("html")?.setAttribute(this.rootAttribute, buttonThemePressed);
            // document.querySelector("html")?.setAttribute(this.rootAttribute, 'dark');
            window.localStorage?.setItem(THEME_STORAGE_KEY, buttonThemePressed);

          }
          // else  if (buttonThemePressed == "auto") {
          //   document.querySelector("html")?.setAttribute(this.rootAttribute, this.preferredColorScheme)
          //   window.localStorage?.setItem(THEME_STORAGE_KEY, buttonThemePressed);
          // }
          document.querySelector(this.menuTarget)?.removeAttribute("open");
        },
        false
      );
    });
  },

};


themeSwitcher.init();
});

</script>
