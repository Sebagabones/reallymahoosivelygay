---
import '../styles/global.css'
import MainBackgroundLayout from '../layouts/MainBackgroundLayout.astro'
import { Code } from 'astro-expressive-code/components'
import ssriRun from '/codeFiles/rakeFiles/ssriRun.rake?url&raw'
import cpPreSSRI from '/codeFiles/rakeFiles/cpPreSSRI.rake?url&raw'
import gitCommit from '/codeFiles/rakeFiles/gitCommit.rake?url&raw'
import pygments from '/codeFiles/rakeFiles/pygments.rake?url&raw'
import uptime from '/codeFiles/rakeFiles/uptime.rake?url&raw'
import hooks from '/codeFiles/rakeFiles/hooks.rake?url&raw'
// import initel from '/codeFiles/emacsConfFiles/config.el?url&raw';
const pageTitle = "Continually updating my Emacs configuration on here";
const pageSubHeading = " ";
---


<MainBackgroundLayout pageTitle={pageTitle}>
		
		<p>As you may hopefully have seen, I have my Emacs config files on my website (if not, well, they are <a
				href="emacsFiles">here</a>).</p>
		<p>Because I have a thing about making things look nice, I had to have syntax highlighting for these, and I had
			to have these match the colourscheme (which is of course based off of Catppuccin). I also wanted this to work
			without JavaScript, and so I decided to use Pygments.</p>

		<h5>Pygments</h5>
		<div class="syntax">
			<p>Pygments allowed me to generate a css style for the different styles I wanted to use (Catppuccin's Latte
				and
				Mocha), which once added to my css file, does not need any updating. This simply just defines a bunch of
				colours for different classnames for spans in a parent div - to generate the css styles simply
				run: <code><span class="sh">pygmentize </span> <span class="o">-f </span><span >html </span><span class="o">-S </span><span >catppuccin-style </span><span class="o">-a </span> <span >.syntax</span></code>
				where <code>catppuccin-style</code> was either catppuccin-mocha or catppuccin-latte dependng if I was
				generating the css for the light or dark mode.</p>
		</div>
		<p>For example, below you can see what an example of span class definition is, here the comment class is being
			defined:</p>
		<div class="syntax">
			<pre>
<span class="w">  </span><span class="p">.</span><span class="nc">syntax</span><span class="w"> </span><span class="p">.</span><span class="nc">c</span><span class="w"> </span><span class="p"></span><span class="w"> </span><span class="k">color</span><span class="p">:</span><span class="w"> </span><span class="mh">#7c7f93</span><span class="w"> </span><span class="p"></span><span class="w"> </span><span class="c">/* Comment */</span>
</pre>
		</div>
		<p>And then here you can see the actual HTML code provided by Pygments to display the above example (you do not
			want to know what the code to display the below example is - but if you do you can go look at the source
			code lol):</p>
		<div class="syntax">
			<pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;syntax&quot;</span><span class="p">&gt;&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span>  <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nc&quot;</span><span class="p">&gt;</span>syntax<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nc&quot;</span><span class="p">&gt;</span>c<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;k&quot;</span><span class="p">&gt;</span>color<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>:<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;mh&quot;</span><span class="p">&gt;</span>#7c7f93<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="p">&gt;</span>/* Comment */<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre>
		</div>
		<div class="syntax">
			<p>As you can see by the second example, this would be very unfun to do by hand. Thankfully, Pygments
				supports a
				lot of languages, and so I can simply pass in my <ins>*.el</ins> files, and have Pygments output the
				HTML
				version of them. The command I used for this was
				<code><span class="sh">pygmentize </span><span class="k">example.el </span> <span class="o">-O </span><span >cssclass=syntax </span><span class="o">-o </span><span class="k">example.el.html </span></code>.
			</p>
			<!-- <p> The really funny thing is my website, for the most part, doesn't use Pygments anymore (including my emacs conf file setup - but I will leave this here as an explanation of what I had done - go look at my blog for how I do this now)</p> -->
		</div>
		<h5>SSRI</h5>
		<p> Here is where <a href="ssri.html">SSRI</a> comes in - I did not want to setup some janky regex to update the
			<ins>emacsConfig.html</ins> file (yes, I have read this <a
				href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">classic</a>)
			everytime I changed my config files (which, being an Emacs user, is about every two minutes). So, yes, to
			make sure my config files are updated on my website I went away and built a templating engine - good use of
			my time, 10/10 would recommend.
		</p>

		<h5>Recap so far</h5>
		<p>Okay, so currently we have covered that I needed to generate HTML files from my <ins>*.el</ins> files with
			Pygments, and
			then include them in my website using SSRI. Seems pretty simply, you could just do a git repo for you Emacs
			files and write a small script to run pygments on each file in there, and then link those to your website
			somehow. Any like, I could, but that wouldn't have been as fun.</p>

		<h5>Capistrano</h5>
		<p>What if, instead of doing that, I used Capistrano to automatically deploy my Emacs config files to my
			webserver, and then to build the new <ins>*.el.html</ins> files, and then rerun SSRI to automatically
			update my emacs config files with a single command? So I did that, turns out Rake files are weird and wild
			beasts, but I kind of like them (along with ruby) now lol.</p>
		<h6>Workflow</h6>
		<p>Initially we should cover all of my hooks, which are built off of using the Capistrano deploy hooks:</p>
		<div class="codeContainer">
			<Code frame="code" code={hooks} lang="ruby" title="hooks.rake" />
		</div>

		<p class="syntax">
			The first thing that I want to happen when I run
			<code><span class="sh">bundle </span> <span class="kt">exec </span><span >cap </span><span >Prod </span> <span >deploy</span></code>
			is to check the uptime of my webserver, mostly so I can just see if I should update and reboot it. So,
			before starting a deployment the <code><span class="kt">:uptime</span></code> task runs:
		</p>

		<div class="codeContainer">
			<Code frame="code" code={uptime} lang="ruby" title="uptime.rake" />
		</div>

		<p class="syntax">
			The next step is to commit and push any changes to the config files (and any Capistrano files) to the remote
			git repo, so the <code><span class="kt">:gitpush</span></code> task is run, which creates a commit with any
			changes, with the commit message being the current time, and then pushes to the remote repo.
		</p>

		<div class="codeContainer">
			<Code frame="code" code={gitCommit} lang="ruby" title="gitCommit.rake" />
		</div>

		<p class="syntax">
			Now for the fun part, where we actually deploy the files - we wait until after the <code
				class=s1>deploy:updated</code> task has finished, and then we call the <code
				class=s1>pygments:pygmentsSetup</code> task:

		</p>

		<div class="codeContainer">
			<Code frame="code" code={pygments} lang="ruby" title="pygments.rake" />
		</div>

		<p class="syntax">

			This task takes the config files, and runs Pygments on them, creating the <ins>*.el.html</ins> files, and
			then invokes the <code><span class="kt">:cpPressri</span></code> task.
		
			<div class="codeContainer">
				<Code frame="code" code={cpPreSSRI} lang="ruby" title="cpPreSSRI.rake" />
			</div>

		</p>
		<p class="syntax">
			This simply copies the files into the webserver directory, and then invokes the
			<code><span class="kt">:ssriRun</span></code> task.
		</p>

		<div class="codeContainer">
			<Code frame="code" code={ssriRun} lang="ruby" title="ssriRun.rake" />
		</div>
		
		<p>
		This runs SSRI on directory, adding the newly generated <ins>*.el.html</ins> files to <ins>emacsFiles.html</ins>.
		</p>

		<h5>Closing thoughts</h5>
		<p>
			Was it a good use of my time to devlop a templating engine, learn ruby and rake files, and to setup Capistrano, just to save myself from occasionally having to copy and paste some HTML into a file? Probably not - but, it was kinda fun and I was bored.
		</p>
</MainBackgroundLayout>

<style>
	.codeContainer {
		padding-top: 2vh;
		padding-bottom: 2vh;
	}
</style>