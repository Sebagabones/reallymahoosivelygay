---
import '../styles/global.css'
import MainBackgroundLayout from '../layouts/MainBackgroundLayout.astro'

const pageTitle = "Server Side Rendered Includes";
const pageSubHeading = "Like all good projects, this started out as me wanting to save time and do less work, and soon spiraled into much more time and work.";
---


<MainBackgroundLayout pageTitle={pageTitle} pageSubHeading={pageSubHeading}>
		<!-- <h3>Server Side Rendered Includes</h3>
		<p><i>Like all good projects, this started out as me wanting to save time and do less work, and soon spiraled
				into much more time and work.</i></p> -->
		<h5>A background on the idea itself:</h5>
		<p>Regular HTML has no way of including other HTML files within it. Now, there have been workarounds and
			solutions to this forever, classically Apache Server Side Includes was one, and a more modern solution is to
			use React, or a templating engine like Jinja - these are all sensible options. </p>
		<p>I, however, am not a sensible person (see <a href="emacsConfigOnMyWebsite">here</a> for what started all
			of this).</p>
		<h5>TL:DR</h5>
		<p>SSRI is my solution to a very simple templating engine for plain HTML to have working include statements to
			bring HTML in from other files.</p>
		<p>After reading <a href="https://css-tricks.com/the-simplest-ways-to-handle-html-includes/">this</a>, and not
			liking many of the options (Gulp seemed senisble, but was bit more than I wanted, as I didn't want to deal
			with gulp files), I found Apache Server Side Includes to be a 'sane' way to do what I wanted, except for one
			small problem; I could not get them to work properly. The best guide I found online was <a
				href="https://joabj.com/Writing/Tech/Tuts/Apache/Apache-SSI.html">here</a>, but when that didn't work I
			decided to make a solution that was pretty much Apache SSI, but where the include statements were
			pre-processed.</p>
		<p>The include statement is simply a html comment on a line where you want the entire contents from the linked
			file to be "pasted" in, and uses the following format:
			<code>&lt;!-- #include file="filename" optional comments --&gt;</code> where <code>filename</code> is the
			name of the file, including file extension (eg, file.html). In theory this would probably work if it was not
			on it's own line,
			but I haven't tested this.
		</p>

		<h5>Why?</h5>
		<p>I wanted something that worked without any dependencies, and didn't require learning a new markup style. The
			main goal for this was to be able to write pure plain HTML pages without using external libraries needing to
			be imported, and that didn't use JavaScript to load things in the browser. Could I have used something like
			NextJS for this? Probably - but I wanted something that would be very simple to use (albeit much less
			powerful).</p>
		<p>Apache SSI seemed very cool for a few reasons - super simple markup (kinda - lack of documention made it a
			bit harder, but the basic idea was decent), and even if something went wrong, the browser always received
			valid HTML. One issue I had was that, well, it didn't work, or at least, I couldn't find a way to get it
			working (again, very little documentation), and while I also felt like server processing the HTML on request
			would add a small amount of overhead, the biggest reason I didn't spend more time on getting SSI to work was
			because I wanted a way to use other webservers without needing to change my HTML files.</p>
		<p>I wanted to use PUG, but found that the html2pug converters didn't work well, and there were a few other
			issues I had with it, and I didn't want to learn another markup style and rewrite my website lol. Similarly
			with Gulp, I didn't want to have to deal with Gulp files.</p>
		<p>Hence, I took a lot of inspiration from SSI, but decided that preprocessing the HTML would be easier.</p>
		<p>In theory, this should work with most other libraries/backends, which is another benefit to it, as you would
			simply run this before starting the server. While it <i>kinda</i> works with big frameworks/libraries like
			React
			and Jinja, the only issue I can think of is currently only HTML files are copied to the output folder. I do
			plan to add an option that copies the entire input dir to the output dir, and only updates the HTML, which
			would solve this issue, and make it pretty flexible for other setups. Likewise, I will probably add an
			argument that allows you to select with files types you want to search in, allowing for more uses with
			<code>.jsx</code>
			files, and possibly CSS files ect.
		</p>

		<h5>Use Cases:</h5>
		<p>I mean - the main use case was for my website lol. That said, it could be useful for anyone teaching/learning
			HTML, as it is a very simple concept that allows for (static) components to be reused across different
			pages, and reduces the learning new things load on anyone using it when compared to Gulp/Pug/React/Jinja.
			Basically, it allows for someone to learn the fundementals of HTML/CSS without needing a backend, but for
			them to still be able to save time without needing to copy HTML to different files.</p>
		<p>Realistically, if you are wanting to use vanilla HTML/CSS in your website, and don't want to have to update a bunch of files everytime you change your footer, this might save you a bunch of time lol.</p>

		<h5>Installation/Usage</h5>
		<p class="syntax">
			A much more detailed guide is over at the <a href="https://github.com/Sebagabones/Server-Side-Rendered-Includes">GitHub repository</a>, however the quick and dirty for installation is that SSRI is on pip, so you can simply run <code><span class="sh">pip</span><span class="kt"> install</span> ssri</code>.
		</p>
</MainBackgroundLayout>